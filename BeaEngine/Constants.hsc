{-# OPTIONS_GHC -fno-warn-unused-imports #-}
#include <bindings.dsl.custom.h>
#include <BeaEngine.h>
module BeaEngine.Constants where
import Foreign.Ptr
import Data.Word
import Data.Int
#strict_import

{- enum INSTRUCTION_TYPE {
    GENERAL_PURPOSE_INSTRUCTION = 0x10000,
    FPU_INSTRUCTION = 0x20000,
    MMX_INSTRUCTION = 0x40000,
    SSE_INSTRUCTION = 0x80000,
    SSE2_INSTRUCTION = 0x100000,
    SSE3_INSTRUCTION = 0x200000,
    SSSE3_INSTRUCTION = 0x400000,
    SSE41_INSTRUCTION = 0x800000,
    SSE42_INSTRUCTION = 0x1000000,
    SYSTEM_INSTRUCTION = 0x2000000,
    VM_INSTRUCTION = 0x4000000,
    UNDOCUMENTED_INSTRUCTION = 0x8000000,
    AMD_INSTRUCTION = 0x10000000,
    ILLEGAL_INSTRUCTION = 0x20000000,
    AES_INSTRUCTION = 0x40000000,
    CLMUL_INSTRUCTION = (int) 0x80000000,
    DATA_TRANSFER = 0x1,
    ARITHMETIC_INSTRUCTION,
    LOGICAL_INSTRUCTION,
    SHIFT_ROTATE,
    BIT_UInt8,
    CONTROL_TRANSFER,
    STRING_INSTRUCTION,
    InOutINSTRUCTION,
    ENTER_LEAVE_INSTRUCTION,
    FLAG_CONTROL_INSTRUCTION,
    SEGMENT_REGISTER,
    MISCELLANEOUS_INSTRUCTION,
    COMPARISON_INSTRUCTION,
    LOGARITHMIC_INSTRUCTION,
    TRIGONOMETRIC_INSTRUCTION,
    UNSUPPORTED_INSTRUCTION,
    LOAD_CONSTANTS,
    FPUCONTROL,
    STATE_MANAGEMENT,
    CONVERSION_INSTRUCTION,
    SHUFFLE_UNPACK,
    PACKED_SINGLE_PRECISION,
    SIMD128bits,
    SIMD64bits,
    CACHEABILITY_CONTROL,
    FP_INTEGER_CONVERSION,
    SPECIALIZED_128bits,
    SIMD_FP_PACKED,
    SIMD_FP_HORIZONTAL,
    AGENT_SYNCHRONISATION,
    PACKED_ALIGN_RIGHT,
    PACKED_SIGN,
    PACKED_BLENDING_INSTRUCTION,
    PACKED_TEST,
    PACKED_MINMAX,
    HORIZONTAL_SEARCH,
    PACKED_EQUALITY,
    STREAMING_LOAD,
    INSERTION_EXTRACTION,
    DOT_PRODUCT,
    SAD_INSTRUCTION,
    ACCELERATOR_INSTRUCTION,
    ROUND_INSTRUCTION
}; -}

#integral_t enum INSTRUCTION_TYPE
#num GENERAL_PURPOSE_INSTRUCTION
#num FPU_INSTRUCTION
#num MMX_INSTRUCTION
#num SSE_INSTRUCTION
#num SSE2_INSTRUCTION
#num SSE3_INSTRUCTION
#num SSSE3_INSTRUCTION
#num SSE41_INSTRUCTION
#num SSE42_INSTRUCTION
#num SYSTEM_INSTRUCTION
#num VM_INSTRUCTION
#num UNDOCUMENTED_INSTRUCTION
#num AMD_INSTRUCTION
#num ILLEGAL_INSTRUCTION
#num AES_INSTRUCTION
#num CLMUL_INSTRUCTION
#num DATA_TRANSFER
#num ARITHMETIC_INSTRUCTION
#num LOGICAL_INSTRUCTION
#num SHIFT_ROTATE
#num BIT_UInt8
#num CONTROL_TRANSFER
#num STRING_INSTRUCTION
#num InOutINSTRUCTION
#num ENTER_LEAVE_INSTRUCTION
#num FLAG_CONTROL_INSTRUCTION
#num SEGMENT_REGISTER
#num MISCELLANEOUS_INSTRUCTION
#num COMPARISON_INSTRUCTION
#num LOGARITHMIC_INSTRUCTION
#num TRIGONOMETRIC_INSTRUCTION
#num UNSUPPORTED_INSTRUCTION
#num LOAD_CONSTANTS
#num FPUCONTROL
#num STATE_MANAGEMENT
#num CONVERSION_INSTRUCTION
#num SHUFFLE_UNPACK
#num PACKED_SINGLE_PRECISION
#num SIMD128bits
#num SIMD64bits
#num CACHEABILITY_CONTROL
#num FP_INTEGER_CONVERSION
#num SPECIALIZED_128bits
#num SIMD_FP_PACKED
#num SIMD_FP_HORIZONTAL
#num AGENT_SYNCHRONISATION
#num PACKED_ALIGN_RIGHT
#num PACKED_SIGN
#num PACKED_BLENDING_INSTRUCTION
#num PACKED_TEST
#num PACKED_MINMAX
#num HORIZONTAL_SEARCH
#num PACKED_EQUALITY
#num STREAMING_LOAD
#num INSERTION_EXTRACTION
#num DOT_PRODUCT
#num SAD_INSTRUCTION
#num ACCELERATOR_INSTRUCTION
#num ROUND_INSTRUCTION
{- enum EFLAGS_STATES {
    TE_ = 1, MO_ = 2, RE_ = 4, SE_ = 8, UN_ = 0x10, PR_ = 0x20
}; -}

#integral_t enum EFLAGS_STATES
#num TE_
#num MO_
#num RE_
#num SE_
#num UN_
#num PR_
{- enum BRANCH_TYPE {
    JO = 1,
    JC = 2,
    JE = 3,
    JA = 4,
    JS = 5,
    JP = 6,
    JL = 7,
    JG = 8,
    JB = 2,
    JECXZ = 10,
    JmpType = 11,
    CallType = 12,
    RetType = 13,
    JNO = -1,
    JNC = -2,
    JNE = -3,
    JNA = -4,
    JNS = -5,
    JNP = -6,
    JNL = -7,
    JNG = -8,
    JNB = -2
}; -}

#integral_t enum BRANCH_TYPE
#num JO
#num JC
#num JE
#num JA
#num JS
#num JP
#num JL
#num JG
#num JB
#num JECXZ
#num JmpType
#num CallType
#num RetType
#num JNO
#num JNC
#num JNE
#num JNA
#num JNS
#num JNP
#num JNL
#num JNG
#num JNB
{- enum ARGUMENTS_TYPE {
    NO_ARGUMENT = 0x10000000,
    REGISTER_TYPE = 0x20000000,
    MEMORY_TYPE = 0x40000000,
    CONSTANT_TYPE = (int) 0x80000000,
    MMX_REG = 0x10000,
    GENERAL_REG = 0x20000,
    FPU_REG = 0x40000,
    SSE_REG = 0x80000,
    CR_REG = 0x100000,
    DR_REG = 0x200000,
    SPECIAL_REG = 0x400000,
    MEMORY_MANAGEMENT_REG = 0x800000,
    SEGMENT_REG = 0x1000000,
    RELATIVE_ = 0x4000000,
    ABSOLUTE_ = 0x8000000,
    READ = 0x1,
    WRITE = 0x2,
    REG0 = 0x1,
    REG1 = 0x2,
    REG2 = 0x4,
    REG3 = 0x8,
    REG4 = 0x10,
    REG5 = 0x20,
    REG6 = 0x40,
    REG7 = 0x80,
    REG8 = 0x100,
    REG9 = 0x200,
    REG10 = 0x400,
    REG11 = 0x800,
    REG12 = 0x1000,
    REG13 = 0x2000,
    REG14 = 0x4000,
    REG15 = 0x8000
}; -}
#integral_t enum ARGUMENTS_TYPE
#num NO_ARGUMENT
#num REGISTER_TYPE
#num MEMORY_TYPE
#num CONSTANT_TYPE
#num MMX_REG
#num GENERAL_REG
#num FPU_REG
#num SSE_REG
#num CR_REG
#num DR_REG
#num SPECIAL_REG
#num MEMORY_MANAGEMENT_REG
#num SEGMENT_REG
#num RELATIVE_
#num ABSOLUTE_
#num READ
#num WRITE
#num REG0
#num REG1
#num REG2
#num REG3
#num REG4
#num REG5
#num REG6
#num REG7
#num REG8
#num REG9
#num REG10
#num REG11
#num REG12
#num REG13
#num REG14
#num REG15
{- enum SPECIAL_INFO {
    UNKNOWN_OPCODE = -1,
    OUT_OF_BLOCK = 0,
    NoTabulation = 0x0,
    Tabulation = 0x1,
    MasmSyntax = 0x0,
    GoAsmSyntax = 0x100,
    NasmSyntax = 0x200,
    ATSyntax = 0x400,
    PrefixedNumeral = 0x10000,
    SuffixedNumeral = 0x0,
    ShowSegmentRegs = 0x1000000
}; -}
#integral_t enum SPECIAL_INFO
#num UNKNOWN_OPCODE
#num OUT_OF_BLOCK
#num NoTabulation
#num Tabulation
#num MasmSyntax
#num GoAsmSyntax
#num NasmSyntax
#num ATSyntax
#num PrefixedNumeral
#num SuffixedNumeral
#num ShowSegmentRegs
